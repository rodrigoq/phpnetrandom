<?php

use NetRandom\NetRandom;
use NetRandom\Tests\Helper;
use PHPUnit\Framework\TestCase;

/**
 * Tests the NetRandom class comparing results with
 * random numbers generated by an actual .net executable.
 */
final class NetRandomCompareTest extends TestCase
{
    private const Cant = 10;
    private const Exe = __DIR__ . "/NetRandom/bin/Release/Random.exe";

    protected function setUp() : void
    {
        if(file_exists(self::Exe) == false)
        {
            $this->markTestSkipped("To run this tests you have to compile the Random.exe .net executable.\n"
                . "The solution is included in the tests directory, you can set\n"
                . "the correct path with the Exe constant in this file.");
        }
    }

    private function runExe(int $rand, int $cant, string $type) : array
    {
        $output = [];
        exec(self::Exe . ' ' . $rand . ' ' . $cant . ' ' . $type, $output);
        return $output;
    }

    public function testInt() : void
    {
        $seed = rand();
        $ret = $this->runExe($seed, self::Cant, 'int');
        $rand = new NetRandom($seed);
        for($i = 0; $i < self::Cant; $i++)
            $this->assertEquals((int)$ret[$i], $rand->Next(), 'Seed: ' . $seed . ', Index: ' . $i);
    }

    public function testDouble() : void
    {
        $seed = rand();
        $ret = $this->runExe($seed, self::Cant, 'double');
        $rand = new NetRandom($seed);
        for($i = 0; $i < self::Cant; $i++)
        {
            $parts = explode(' ', $ret[$i]);
            $this->assertEquals(str_pad($parts[1], 64, '0', STR_PAD_LEFT),
                Helper::FloatToBinStr($rand->NextDouble()),
                'Seed: ' . $seed . ', Index: ' . $i . ', Num: ' . $parts[0]);
        }
    }

    public function testByte() : void
    {
        $seed = rand();
        $ret = $this->runExe($seed, self::Cant, 'byte');
        $ret = str_split($ret[0], 2);

        $rand = new NetRandom($seed);
        $bytes = array_fill(0, self::Cant, 0);
        $rand->NextBytes($bytes);

        for($i = 0; $i < self::Cant; $i++)
            $this->assertEquals(hexdec($ret[$i]), $bytes[$i], 'Seed: ' . $seed . ', Index: ' . $i);
    }

}
